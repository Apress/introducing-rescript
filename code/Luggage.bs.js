// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

var luggage = [
  [
    "Seth",
    60
  ],
  [
    "Sarah",
    47
  ],
  [
    "Sarah",
    40
  ],
  [
    "John",
    12
  ],
  [
    "John",
    330
  ]
];

var pricedLuggage = luggage.map(function (param) {
      var weight = param[1];
      var cost = weight <= 50 ? 25 : (
          weight <= 100 ? 50 : 100
        );
      return [
              param[0],
              weight,
              cost
            ];
    });

console.log(pricedLuggage);

var filteredLuggage = pricedLuggage.filter(function (param) {
      return param[1] <= 200;
    });

console.log(filteredLuggage);

var totalWeight = filteredLuggage.reduce((function (total, param) {
        return total + param[1] | 0;
      }), 0);

console.log(totalWeight);

var totalCost = filteredLuggage.reduce((function (total, param) {
        return total + param[2] | 0;
      }), 0);

console.log(totalCost);

var match = filteredLuggage.reduce((function (param, param$1) {
        return [
                param[0] + param$1[1] | 0,
                param[1] + param$1[2] | 0
              ];
      }), [
      0,
      0
    ]);

var totalCost$1 = match[1];

var totalWeight$1 = match[0];

console.log(totalWeight$1, totalCost$1);

function processLuggage(luggage) {
  return luggage.map(function (param) {
                  var weight = param[1];
                  var cost = weight <= 50 ? 25 : (
                      weight <= 100 ? 50 : 100
                    );
                  return [
                          param[0],
                          weight,
                          cost
                        ];
                }).filter(function (param) {
                return param[1] <= 200;
              }).reduce((function (param, param$1) {
                return [
                        param[0] + param$1[1] | 0,
                        param[1] + param$1[2] | 0
                      ];
              }), [
              0,
              0
            ]);
}

function processLuggageV2(luggage) {
  return luggage.reduce((function (param, param$1) {
                var weight = param$1[1];
                var totalCst = param[1];
                var totalWt = param[0];
                var cost = weight <= 50 ? 25 : (
                    weight <= 100 ? 50 : 100
                  );
                if (weight <= 200) {
                  return [
                          totalWt + weight | 0,
                          totalCst + cost | 0
                        ];
                } else {
                  return [
                          totalWt,
                          totalCst
                        ];
                }
              }), [
              0,
              0
            ]);
}

function processLuggageList(luggage) {
  return Belt_List.reduce(Belt_List.keep(Belt_List.map(luggage, (function (param) {
                        var weight = param[1];
                        var cost = weight <= 50 ? 25 : (
                            weight <= 100 ? 50 : 100
                          );
                        return [
                                param[0],
                                weight,
                                cost
                              ];
                      })), (function (param) {
                    return param[1] < 200;
                  })), [
              0,
              0
            ], (function (param, param$1) {
                return [
                        param[0] + param$1[1] | 0,
                        param[1] + param$1[2] | 0
                      ];
              }));
}

function processLuggageListV2(luggage) {
  return Belt_List.reduce(luggage, [
              0,
              0
            ], (function (param, param$1) {
                var weight = param$1[1];
                var totalCst = param[1];
                var totalWt = param[0];
                var cost = weight <= 50 ? 25 : (
                    weight <= 100 ? 50 : 100
                  );
                if (weight <= 200) {
                  return [
                          totalWt + weight | 0,
                          totalCst + cost | 0
                        ];
                } else {
                  return [
                          totalWt,
                          totalCst
                        ];
                }
              }));
}

function totalLuggagePerPerson(luggage) {
  return Belt_List.reduce(luggage, /* [] */0, (function (weights, item) {
                if (!weights) {
                  return {
                          hd: item,
                          tl: weights
                        };
                }
                var match = weights.hd;
                var currPerson = match[0];
                if (currPerson === item[0]) {
                  return {
                          hd: [
                            currPerson,
                            match[1] + item[1] | 0
                          ],
                          tl: weights.tl
                        };
                } else {
                  return {
                          hd: item,
                          tl: weights
                        };
                }
              }));
}

function totalLuggagePerPersonMap(luggage) {
  return Belt_Array.reduce(luggage, undefined, (function (weights, item) {
                var person = item[0];
                var curr = Belt_MapString.getWithDefault(weights, person, 0);
                return Belt_MapString.set(weights, person, curr + item[1] | 0);
              }));
}

exports.luggage = luggage;
exports.pricedLuggage = pricedLuggage;
exports.filteredLuggage = filteredLuggage;
exports.totalWeight = totalWeight$1;
exports.totalCost = totalCost$1;
exports.processLuggage = processLuggage;
exports.processLuggageV2 = processLuggageV2;
exports.processLuggageList = processLuggageList;
exports.processLuggageListV2 = processLuggageListV2;
exports.totalLuggagePerPerson = totalLuggagePerPerson;
exports.totalLuggagePerPersonMap = totalLuggagePerPersonMap;
/* pricedLuggage Not a pure module */
