// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function $$new(param) {
  return /* [] */0;
}

function push(stack, element) {
  return {
          hd: element,
          tl: stack
        };
}

function peek(stack) {
  if (stack) {
    return Caml_option.some(stack.hd);
  }
  
}

function pop(stack) {
  if (stack) {
    return stack.tl;
  } else {
    return stack;
  }
}

var ListStack = {
  $$new: $$new,
  push: push,
  peek: peek,
  pop: pop,
  size: Belt_List.length
};

function $$new$1(param) {
  return [];
}

function push$1(stack, element) {
  var copy = stack.slice();
  copy.push(element);
  return copy;
}

function peek$1(stack) {
  if (stack.length === 0) {
    return ;
  } else {
    return Caml_option.some(Caml_array.get(stack, stack.length - 1 | 0));
  }
}

function pop$1(stack) {
  var copy = stack.slice();
  copy.pop();
  return copy;
}

function size(prim) {
  return prim.length;
}

var ArrayStack = {
  $$new: $$new$1,
  push: push$1,
  peek: peek$1,
  pop: pop$1,
  size: size
};

function $$new$2(param) {
  return /* Empty */0;
}

function push$2(stack, element) {
  return /* Item */{
          _0: element,
          _1: stack
        };
}

function peek$2(stack) {
  if (stack) {
    return Caml_option.some(stack._0);
  }
  
}

function pop$2(stack) {
  if (stack) {
    return stack._1;
  } else {
    return stack;
  }
}

function size$1(stack) {
  if (stack) {
    return 1 + size$1(stack._1) | 0;
  } else {
    return 0;
  }
}

var MyStack = {
  $$new: $$new$2,
  push: push$2,
  peek: peek$2,
  pop: pop$2,
  size: size$1
};

function $$new$3(param) {
  return [];
}

function push$3(stack, element) {
  stack.push(element);
  
}

function peek$3(stack) {
  var len = stack.length;
  if (len === 0) {
    return ;
  } else {
    return Caml_option.some(Caml_array.get(stack, len - 1 | 0));
  }
}

function pop$3(stack) {
  stack.pop();
  
}

function size$2(prim) {
  return prim.length;
}

function copy(prim) {
  return prim.slice();
}

var MutArrayStack = {
  $$new: $$new$3,
  push: push$3,
  peek: peek$3,
  pop: pop$3,
  size: size$2,
  copy: copy
};

function $$new$4(param) {
  return {
          contents: /* [] */0
        };
}

function push$4(stack, element) {
  stack.contents = {
    hd: element,
    tl: stack.contents
  };
  
}

function peek$4(stack) {
  return peek(stack.contents);
}

function pop$4(stack) {
  stack.contents = pop(stack.contents);
  
}

function size$3(stack) {
  return Belt_List.length(stack.contents);
}

function copy$1(stack) {
  return {
          contents: stack.contents
        };
}

var MutListStack = {
  $$new: $$new$4,
  push: push$4,
  peek: peek$4,
  pop: pop$4,
  size: size$3,
  copy: copy$1
};

function MakeMutableStack(Stack) {
  var $$new = function (param) {
    return {
            contents: Curry._1(Stack.$$new, undefined)
          };
  };
  var push = function (stack, element) {
    stack.contents = Curry._2(Stack.push, stack.contents, element);
    
  };
  var peek = function (stack) {
    return Curry._1(Stack.peek, stack.contents);
  };
  var pop = function (stack) {
    stack.contents = Curry._1(Stack.pop, stack.contents);
    
  };
  var size = function (stack) {
    return Curry._1(Stack.size, stack.contents);
  };
  var copy = function (stack) {
    return {
            contents: stack.contents
          };
  };
  return {
          $$new: $$new,
          push: push,
          peek: peek,
          pop: pop,
          size: size,
          copy: copy
        };
}

function MakeImmutableStack(Stack) {
  var push = function (stack, element) {
    var copy = Curry._1(Stack.copy, stack);
    Curry._2(Stack.push, copy, element);
    return copy;
  };
  var pop = function (stack) {
    var copy = Curry._1(Stack.copy, stack);
    Curry._1(Stack.pop, copy);
    return copy;
  };
  return {
          $$new: Stack.$$new,
          push: push,
          peek: Stack.peek,
          pop: pop,
          size: Stack.size
        };
}

exports.ListStack = ListStack;
exports.ArrayStack = ArrayStack;
exports.MyStack = MyStack;
exports.MutArrayStack = MutArrayStack;
exports.MutListStack = MutListStack;
exports.MakeMutableStack = MakeMutableStack;
exports.MakeImmutableStack = MakeImmutableStack;
/* No side effect */
