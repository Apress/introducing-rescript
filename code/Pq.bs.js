// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


function insert(queue, prio, elt) {
  if (!queue) {
    return /* Node */{
            _0: prio,
            _1: elt,
            _2: /* Empty */0,
            _3: /* Empty */0
          };
  }
  var right = queue._3;
  var left = queue._2;
  var e = queue._1;
  var p = queue._0;
  if (prio <= p) {
    return /* Node */{
            _0: prio,
            _1: elt,
            _2: insert(right, p, e),
            _3: left
          };
  } else {
    return /* Node */{
            _0: p,
            _1: e,
            _2: insert(right, prio, elt),
            _3: left
          };
  }
}

function remove_top(queue) {
  if (queue) {
    var left = queue._2;
    if (!queue._3) {
      return left;
    }
    if (!left) {
      return queue._3;
    }
    var right = queue._3;
    var rprio = right._0;
    var lprio = left._0;
    if (lprio <= rprio) {
      return /* Node */{
              _0: lprio,
              _1: left._1,
              _2: remove_top(left),
              _3: right
            };
    } else {
      return /* Node */{
              _0: rprio,
              _1: right._1,
              _2: left,
              _3: remove_top(right)
            };
    }
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function extract(queue) {
  if (queue) {
    return [
            queue._0,
            queue._1,
            remove_top(queue)
          ];
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var PriorityQueue = {
  empty: /* Empty */0,
  insert: insert,
  remove_top: remove_top,
  extract: extract
};

exports.PriorityQueue = PriorityQueue;
/* No side effect */
