// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("rescript/lib/js/js_dict.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function parsePlayer(s) {
  var parsed = JSON.parse(s);
  var obj = Belt_Option.getExn(Js_json.decodeObject(parsed));
  var player = Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "player"), Js_json.decodeNumber)) | 0;
  var score = Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "score"), Js_json.decodeNumber)) | 0;
  return {
          player: player,
          score: score
        };
}

function parsePlayer2(s) {
  try {
    var parsed = JSON.parse(s);
    var obj = Belt_Option.getExn(Js_json.decodeObject(parsed));
    var player = Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "player"), Js_json.decodeNumber)) | 0;
    var score = Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "score"), Js_json.decodeNumber)) | 0;
    return {
            player: player,
            score: score
          };
  }
  catch (exn){
    return ;
  }
}

var parsed = parsePlayer2("{ \"player\": 1}");

if (parsed !== undefined) {
  console.log("we parsed it");
} else {
  console.log("failed to parse");
}

function parsePlayer3(s) {
  var parsed;
  try {
    parsed = JSON.parse(s);
  }
  catch (exn){
    parsed = Pervasives.failwith("could not parse");
  }
  var obj;
  try {
    obj = Belt_Option.getExn(Js_json.decodeObject(parsed));
  }
  catch (exn$1){
    obj = Pervasives.failwith("expected object");
  }
  var player;
  try {
    player = Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "player"), Js_json.decodeNumber)) | 0;
  }
  catch (exn$2){
    player = Pervasives.failwith("expected player:int");
  }
  var score;
  try {
    score = Belt_Option.getExn(Belt_Option.flatMap(Js_dict.get(obj, "score"), Js_json.decodeNumber)) | 0;
  }
  catch (exn$3){
    score = Pervasives.failwith("expected score:int");
  }
  return {
          player: player,
          score: score
        };
}

var parsed$1 = parsePlayer("{ \"player\": 1}");

exports.parsePlayer = parsePlayer;
exports.parsePlayer2 = parsePlayer2;
exports.parsePlayer3 = parsePlayer3;
exports.parsed = parsed$1;
/* parsed Not a pure module */
