// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';


console.log(5);

console.log(9);

function startingRank(t, c) {
  if (t !== 0) {
    if (c) {
      return 0;
    } else {
      return 8;
    }
  } else if (c) {
    return 1;
  } else {
    return 7;
  }
}

console.log(startingRank(/* Pawn */0, /* Black */0));

console.log(startingRank(/* Rook */3, /* Black */0));

function points(piece) {
  switch (piece.TAG | 0) {
    case /* Pawn */0 :
        return 1;
    case /* Knight */1 :
    case /* Bishop */2 :
        return 3;
    case /* Queen */3 :
        return 9;
    case /* Rook */4 :
        return 5;
    case /* King */5 :
        return 0;
    
  }
}

console.log(points({
          TAG: /* Rook */4,
          _0: /* White */1,
          _1: [
            1,
            1
          ],
          _2: false
        }));

console.log(points({
          TAG: /* Queen */3,
          _0: /* White */1,
          _1: [
            1,
            4
          ]
        }));

console.log(true);

console.log(true);

function canCapture(attacker, target) {
  if (target.TAG === /* King */5) {
    return false;
  } else {
    return attacker._0 !== target._0;
  }
}

var whiteBishop = {
  TAG: /* Bishop */2,
  _0: /* White */1,
  _1: [
    1,
    3
  ]
};

var whiteKnight = {
  TAG: /* Knight */1,
  _0: /* White */1,
  _1: [
    2,
    4
  ]
};

var whiteKing = {
  TAG: /* King */5,
  _0: /* White */1,
  _1: [
    8,
    2
  ],
  _2: false,
  _3: false
};

var blackRook = {
  TAG: /* Rook */4,
  _0: /* Black */0,
  _1: [
    8,
    3
  ],
  _2: false
};

console.log(canCapture(blackRook, whiteBishop));

console.log(canCapture(whiteKing, blackRook));

console.log(canCapture(blackRook, whiteKing));

console.log(canCapture(whiteBishop, whiteKnight));

function canCastle(moving, target) {
  switch (moving.TAG | 0) {
    case /* Rook */4 :
        if (moving._2 || !(target.TAG === /* King */5 && !(target._2 || target._3))) {
          return false;
        } else {
          return moving._0 === target._0;
        }
    case /* King */5 :
        if (moving._2 || moving._3 || !(target.TAG === /* Rook */4 && !target._2)) {
          return false;
        } else {
          return moving._0 === target._0;
        }
    default:
      return false;
  }
}

var whiteKing$1 = {
  TAG: /* King */5,
  _0: /* White */1,
  _1: [
    1,
    5
  ],
  _2: false,
  _3: false
};

var whiteRook1 = {
  TAG: /* Rook */4,
  _0: /* White */1,
  _1: [
    1,
    1
  ],
  _2: false
};

var whiteRook2 = {
  TAG: /* Rook */4,
  _0: /* White */1,
  _1: [
    1,
    6
  ],
  _2: true
};

console.log(canCastle(whiteKing$1, whiteRook1));

console.log(canCastle(whiteKing$1, whiteRook2));

function canRookMove(c, target) {
  if (target !== undefined) {
    if (target.TAG === /* King */5 && !(target._2 || target._3)) {
      return target._0 === c;
    } else {
      return target._0 !== c;
    }
  } else {
    return true;
  }
}

function color(piece) {
  return piece.color;
}

function canCastle$1(moving, target) {
  switch (moving.TAG | 0) {
    case /* Rook */4 :
        if (moving.hasMoved || !(target.TAG === /* King */5 && !(target.hasMoved || target.inCheck))) {
          return false;
        } else {
          return moving.color === target.color;
        }
    case /* King */5 :
        if (moving.hasMoved || moving.inCheck || !(target.TAG === /* Rook */4 && !target.hasMoved)) {
          return false;
        } else {
          return moving.color === target.color;
        }
    default:
      return false;
  }
}

var firstPlayerColor = /* White */1;

var myKing = /* King */5;

var rook = {
  TAG: /* Rook */4,
  color: /* White */1,
  pos: [
    1,
    1
  ],
  hasMoved: false
};

exports.firstPlayerColor = firstPlayerColor;
exports.myKing = myKing;
exports.startingRank = startingRank;
exports.points = points;
exports.canCapture = canCapture;
exports.whiteBishop = whiteBishop;
exports.whiteKnight = whiteKnight;
exports.blackRook = blackRook;
exports.whiteKing = whiteKing$1;
exports.whiteRook1 = whiteRook1;
exports.whiteRook2 = whiteRook2;
exports.canRookMove = canRookMove;
exports.rook = rook;
exports.color = color;
exports.canCastle = canCastle$1;
/*  Not a pure module */
